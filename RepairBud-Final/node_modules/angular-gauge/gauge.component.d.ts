import { ElementRef, EventEmitter, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';
import { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';
import * as ɵngcc0 from '@angular/core';
export declare class GaugeComponent implements AfterViewInit, OnChanges, GaugeOptions {
    private elm;
    private defaults;
    /**
     * The angle in degrees to start the dial
     */
    dialStartAngle: number;
    /**
     * The angle in degrees to end the dial. This MUST be less than dialStartAngle
     */
    dialEndAngle: number;
    /**
     * The radius of the gauge
     */
    dialRadius: number;
    /**
     * The minimum value for the gauge
     */
    min: number;
    /**
     * The maximum value for the gauge
     */
    max: number;
    /**
     * Function that returns a string label that will be rendered in the center. This function will be passed the current value
     */
    label: (value: number) => string;
    /**
     * Function that returns a string color value for the gauge''s fill (value dial)
     */
    color: (value: number) => string;
    /**
     * Whether to show the value at the center of the gauge
     */
    showValue: boolean;
    /**
     * The CSS class of the gauge
     */
    gaugeClass: string;
    /**
     * The CSS class of the gauge's dial
     */
    dialClass: string;
    /**
     * The CSS class of the gauge's fill (value dial)
     */
    valueDialClass: string;
    /**
     * 	The CSS class of the gauge's text
     */
    valueClass: string;
    /**
     * The value of the gauge
     */
    value: number;
    /**
     * Whether to animate changing the gauge
     */
    animated: boolean;
    /**
     * Animation duration in seconds
     */
    animationDuration: number;
    /**
     * Called when the gauge is created
     */
    gaugeCreated: EventEmitter<{
        gauge: any;
    }>;
    private gauge;
    constructor(elm: ElementRef, defaults: GaugeDefaults);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private updateValue();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GaugeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GaugeComponent, "mwl-gauge", never, { "dialStartAngle": "dialStartAngle"; "dialEndAngle": "dialEndAngle"; "dialRadius": "dialRadius"; "min": "min"; "max": "max"; "label": "label"; "color": "color"; "showValue": "showValue"; "gaugeClass": "gaugeClass"; "dialClass": "dialClass"; "valueDialClass": "valueDialClass"; "valueClass": "valueClass"; "value": "value"; "animated": "animated"; "animationDuration": "animationDuration"; }, { "gaugeCreated": "gaugeCreated"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImdhdWdlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR2F1Z2VEZWZhdWx0cywgR2F1Z2VPcHRpb25zIH0gZnJvbSAnLi9nYXVnZS1kZWZhdWx0cy5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdhdWdlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBHYXVnZU9wdGlvbnMge1xuICAgIHByaXZhdGUgZWxtO1xuICAgIHByaXZhdGUgZGVmYXVsdHM7XG4gICAgLyoqXG4gICAgICogVGhlIGFuZ2xlIGluIGRlZ3JlZXMgdG8gc3RhcnQgdGhlIGRpYWxcbiAgICAgKi9cbiAgICBkaWFsU3RhcnRBbmdsZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBhbmdsZSBpbiBkZWdyZWVzIHRvIGVuZCB0aGUgZGlhbC4gVGhpcyBNVVNUIGJlIGxlc3MgdGhhbiBkaWFsU3RhcnRBbmdsZVxuICAgICAqL1xuICAgIGRpYWxFbmRBbmdsZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSByYWRpdXMgb2YgdGhlIGdhdWdlXG4gICAgICovXG4gICAgZGlhbFJhZGl1czogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBtaW5pbXVtIHZhbHVlIGZvciB0aGUgZ2F1Z2VcbiAgICAgKi9cbiAgICBtaW46IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSB2YWx1ZSBmb3IgdGhlIGdhdWdlXG4gICAgICovXG4gICAgbWF4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc3RyaW5nIGxhYmVsIHRoYXQgd2lsbCBiZSByZW5kZXJlZCBpbiB0aGUgY2VudGVyLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgcGFzc2VkIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgICovXG4gICAgbGFiZWw6ICh2YWx1ZTogbnVtYmVyKSA9PiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc3RyaW5nIGNvbG9yIHZhbHVlIGZvciB0aGUgZ2F1Z2UnJ3MgZmlsbCAodmFsdWUgZGlhbClcbiAgICAgKi9cbiAgICBjb2xvcjogKHZhbHVlOiBudW1iZXIpID0+IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHNob3cgdGhlIHZhbHVlIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGdhdWdlXG4gICAgICovXG4gICAgc2hvd1ZhbHVlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1MgY2xhc3Mgb2YgdGhlIGdhdWdlXG4gICAgICovXG4gICAgZ2F1Z2VDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1MgY2xhc3Mgb2YgdGhlIGdhdWdlJ3MgZGlhbFxuICAgICAqL1xuICAgIGRpYWxDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1MgY2xhc3Mgb2YgdGhlIGdhdWdlJ3MgZmlsbCAodmFsdWUgZGlhbClcbiAgICAgKi9cbiAgICB2YWx1ZURpYWxDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFx0VGhlIENTUyBjbGFzcyBvZiB0aGUgZ2F1Z2UncyB0ZXh0XG4gICAgICovXG4gICAgdmFsdWVDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBvZiB0aGUgZ2F1Z2VcbiAgICAgKi9cbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gYW5pbWF0ZSBjaGFuZ2luZyB0aGUgZ2F1Z2VcbiAgICAgKi9cbiAgICBhbmltYXRlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBbmltYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kc1xuICAgICAqL1xuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIGdhdWdlIGlzIGNyZWF0ZWRcbiAgICAgKi9cbiAgICBnYXVnZUNyZWF0ZWQ6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGdhdWdlOiBhbnk7XG4gICAgfT47XG4gICAgcHJpdmF0ZSBnYXVnZTtcbiAgICBjb25zdHJ1Y3RvcihlbG06IEVsZW1lbnRSZWYsIGRlZmF1bHRzOiBHYXVnZURlZmF1bHRzKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBwcml2YXRlIHVwZGF0ZVZhbHVlKCk7XG59XG4iXX0=